// whoami.js
const { GHL_TOKEN } = process.env;

export const handler = async (event) => {
  const user = parseNetlifyIdentity(event.headers.authorization); // decode Netlify JWT
  if (!user) return { statusCode: 401, body: 'Unauthorized' };

  const email = user.email;
  // 1) Look up contact by email
  const res = await fetch(`https://services.leadconnectorhq.com/contacts/?email=${encodeURIComponent(email)}`, {
    headers: { Authorization: `Bearer ${GHL_TOKEN}`, Version: '2021-07-28' }
  });
  const data = await res.json();

  let contact = data.contacts?.[0];
  if (!contact) {
    // 2) Create contact if missing
    const create = await fetch(`https://services.leadconnectorhq.com/contacts/`, {
      method: 'POST',
      headers: { Authorization: `Bearer ${GHL_TOKEN}`, 'Content-Type':'application/json', Version: '2021-07-28' },
      body: JSON.stringify({ email })
    });
    contact = await create.json();
  }

  // OPTIONAL: tag “Calendar User” or set a custom field “App User ID” = user.id
  // await fetch( ... PUT /contacts/{id} ... )

  return {
    statusCode: 200,
    body: JSON.stringify({
      email,
      contactId: contact.id || contact.contact?.id,
    })
  };
};

function parseNetlifyIdentity(authHeader) {
  if (!authHeader?.startsWith('Bearer ')) return null;
  // If you want: verify the token; or trust Netlify’s proxy when using role-protected functions.
  try {
    const token = authHeader.slice(7);
    // decode here if needed
    return JSON.parse(atob(token.split('.')[1])); // simple decode, not verification
  } catch { return null; }
}
